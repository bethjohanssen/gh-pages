{
    "version": "https://jsonfeed.org/version/1",
    "title": "Seed",
    "description": "",
    "home_page_url": "https://bethjohanssen.github.io/gh-pages",
    "feed_url": "https://bethjohanssen.github.io/gh-pages/feed.json",
    "user_comment": "",
    "author": {
        "name": "bethjohanssen"
    },
    "items": [
        {
            "id": "https://bethjohanssen.github.io/gh-pages/bian-ma-feng-ge.html",
            "url": "https://bethjohanssen.github.io/gh-pages/bian-ma-feng-ge.html",
            "title": "编码风格",
            "summary": "编码风格 规则的作用就是避免混乱。但规则本身一定要权威，有说服力，并且是理性的。 以下为个人总结使用的C++编码风格，仅所记录，会随着想法不同而不断更新。 https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents/ C++编码规范与指导 (baiy.cn) Doxygen Manual: Documenting the code doxygen 注释风格 VS2019 生成的文档注释样式：Doxygen(/**)&hellip;",
            "content_html": "<h1 id=\"编码风格\">编码风格</h1>\n<blockquote>\n<p>规则的作用就是避免混乱。但规则本身一定要权威，有说服力，并且是理性的。</p>\n</blockquote>\n<p>以下为个人总结使用的C++编码风格，仅所记录，会随着想法不同而不断更新。</p>\n<h4 id=\"参考文档\">参考文档</h4>\n<blockquote>\n<p><a href=\"https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents/\">https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents/</a>\n<a href=\"http://baiy.cn/doc/cpp/index.htm\">C++编码规范与指导 (baiy.cn)</a></p>\n</blockquote>\n<h4 id=\"命名规范\">命名规范</h4>\n<ol>\n<li>通用命名规则。 <ol>\n<li>函数命名，变量命名，文件命名要有描述性；少用缩写。</li>\n<li>在保持一个标识符意思明确的同时，应当尽量缩短其长度。</li>\n<li>不要出现仅靠大小写区分的相似的标识符。</li>\n<li><del>程序中不要出现名字完全相同的局部变量和全局变量，尽管两者的作用域不同而不会发生语法错误，但容易使人误解。~~~~完全没有遵守的规则😂</del></li>\n</ol>\n</li>\n<li>命名空间命名。\n 不使用缩写作为名称。</li>\n<li><strong>类型命名</strong> 。\n 类型名称的每个单词首字母均大写，不包含下划线： <code>MyExcitingClass</code>，<code>MyExcitingEnum</code>。\n 所有类型命名 —— 类, 结构体, 类型定义 (<code>typedef</code>)，枚举，类型模板参数 —— 均使用相同约定，即以大写字母开始，每个单词首字母均大写，不包含下划线。\n 类的命名推荐用”名词”或”<strong>形容词＋名词</strong> “的形式。</li>\n<li>函数命名。\n 常规函数使用大小写混合，取值和设值函数则要求与变量名匹配。\n 一般来说，函数名的每个单词首字母大写 (即 “驼峰变量名” 或 “帕斯卡变量名”)，没有下划线。对于首字母缩写的单词，更倾向于将它们视作一个单词进行首字母大写 (例如，写作 <code>StartRpc()</code> 而非 <code>StartRPC()</code>)。\n 函数名应当使用”动词”或者”<strong>动词＋名词</strong> “（动宾词组）的形式。\n 所有返回布尔的函数应发起true/false的询问，如<code>IsVisible()</code> 或 <code>ShouldClearBuffer()</code>。</li>\n<li><strong>变量命名</strong> 。\n 变量 (包括函数参数) 和数据成员名一律小写，单词之间用下划线连接。\n <del>类的成员变量以下划线结尾，但结构体的就不用，如： ~~`a_local_variable`</del>， <del><code>a_struct_data_member</code></del>， <del><code>a_class_data_member_</code></del>。~~~~表示疑惑的规则。~~\n 变量的名字应当使用“名词”或者“<strong>形容词＋名词</strong> ”。</li>\n<li>常量命名。\n 声明为 <code>constexpr</code> 或 <code>const</code> 的变量，或在程序运行期间其值始终保持不变的，命名时以 “k” 开头，大小写混合。\n 所有具有静态存储类型的变量 (例如静态变量或全局变量, 参见 <a href=\"http://en.cppreference.com/w/cpp/language/storage_duration#Storage_duration\">存储类型</a>) 都应当以此方式命名。对于其他存储类型的变量，如自动变量等，这条规则是可选的。 如果不采用这条规则， 就按照一般的变量命名规则。</li>\n<li>枚举命名。\n 枚举的命名和常量一致: <code>kEnumName</code> 。</li>\n<li>宏命名。\n 全部大写，使用下划线。</li>\n</ol>\n<hr>\n<h4 id=\"代码风格与版式\">代码风格与版式</h4>\n<ol>\n<li></li>\n</ol>\n<hr>\n<h4 id=\"注释规范\">注释规范</h4>\n<p><a href=\"https://www.doxygen.nl/manual/docblocks.html\">Doxygen Manual: Documenting the code</a></p>\n<p>doxygen 注释风格</p>\n<p>VS2019 生成的文档注释样式：Doxygen(/**)</p>\n<ul>\n<li><strong>brief description</strong>  简要说明。简短一行。</li>\n<li><strong>detailed description</strong>  详细描述。更长，更详细的文档。目前使用的是Javadoc风格。\n```C++\n/**</li>\n</ul>\n<ul>\n<li>… text …</li>\n<li>/\n```</li>\n</ul>\n<ul>\n<li><strong>body description</strong>  可以作为详细描述，也可以描述详细实现的集合。</li>\n</ul>\n<p>在成员之后放置文档</p>\n<p>如果要记录文件、结构、联合、类或枚举的成员，有时需要将文档块放在成员之后而不是之前。 为此，您必须在注释块中放置一个额外的 &lt; 标记。 请注意，这也适用于函数的参数。 </p>\n<pre><code class=\"language-C++\">///&lt; Detailed description after the member\n/**&lt; [in] docs for input parameter v. */\n</code></pre>\n<p><a href=\"https://www.doxygen.nl/manual/commands.html\">Doxygen Manual: Special Commands</a></p>\n",
            "author": {
                "name": "bethjohanssen"
            },
            "tags": [
            ],
            "date_published": "2021-11-01T13:10:19+08:00",
            "date_modified": "2021-11-01T13:10:19+08:00"
        },
        {
            "id": "https://bethjohanssen.github.io/gh-pages/windowsping-tai-vs2019chuang-jian-gtestxiang-mu.html",
            "url": "https://bethjohanssen.github.io/gh-pages/windowsping-tai-vs2019chuang-jian-gtestxiang-mu.html",
            "title": "Windows平台VS2019创建GTest项目",
            "summary": "基础信息 平台：Windows10 编译器：VS2019（VS2019已集成了google test） 微软官方说明文档 单元测试入门 - Visual Studio (Windows) | Microsoft Docs 官方文档 如何使用适用于&hellip;",
            "content_html": "<h1 id=\"基础信息\">基础信息</h1>\n<ul>\n<li>平台：Windows10</li>\n<li>编译器：VS2019（VS2019已集成了google test）</li>\n</ul>\n<blockquote>\n<p>微软官方说明文档 <a href=\"https://docs.microsoft.com/zh-cn/visualstudio/test/getting-started-with-unit-testing?view=vs-2019&amp;tabs=mstest\">单元测试入门 - Visual Studio (Windows) | Microsoft Docs</a></p>\n</blockquote>\n<h1 id=\"创建步骤\">创建步骤</h1>\n<ol>\n<li>在 Visual Studio 中，打开要测试的项目。</li>\n<li>在“解决方案资源管理器”中，选择解决方案节点。 然后，在顶部菜单栏中，选择“文件” &gt; “添加” &gt; “新项目” 。\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/146c7226-a1b2-46c5-998c-7303feff80d8.png\" data-is-external-image=\"true\"  alt=\"146c7226-a1b2-46c5-998c-7303feff80d8.png\" /></figure></li>\n<li>在新项目对话框中，找到要使用的测试框架的单元测试项目模板（Google Test），并选择它。\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/a365ce04-bb07-4f2e-aae3-25c3ebd88ef8.png\" data-is-external-image=\"true\"  alt=\"a365ce04-bb07-4f2e-aae3-25c3ebd88ef8.png\" /></figure></li>\n<li>配置新项目，并选择”创建”。\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/3c6f83d8-48c8-4677-9321-1f480c699bd5.png\" data-is-external-image=\"true\"  alt=\"3c6f83d8-48c8-4677-9321-1f480c699bd5.png\" /></figure></li>\n<li>测试项目配置。<ol>\n<li>选择要测试的项目。选择一个项目时，Visual Studio会添加对所选项目的引用。不选择任何项目，需要手动添加对要测试项目的引用。</li>\n<li>在 Google Test 二进制文件的静态和动态链接之间进行选择时，注意事项与任何 C++ 程序相同。 有关详细信息，请参阅 <a href=\"https://docs.microsoft.com/zh-cn/cpp/build/dlls-in-visual-cpp?view=msvc-160\">Visual C++ 中的 DLL</a>。</li>\n<li>Google Test 二进制文件会自动下载到解决方案的根路径下的“packages” 文件夹。\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/13a3a9b5-b108-435b-ba09-905a9e7030c7.png\" data-is-external-image=\"true\"  alt=\"13a3a9b5-b108-435b-ba09-905a9e7030c7.png\" /></figure></li>\n</ol>\n</li>\n<li>添加Include指令。 \n在test.cpp 文件中，添加任何所需的 #include 指令以使程序的类型和函数对测试代码可见。 通常，程序在文件夹层次结构中的上一层。 如果键入 #include “../“，则会出现一个 IntelliSense 窗口，使你可以选择头文件的完整路径。\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/b2c1b9e3-225e-43e1-9feb-ae9d652ad344.png\" data-is-external-image=\"true\"  alt=\"b2c1b9e3-225e-43e1-9feb-ae9d652ad344.png\" /></figure></li>\n<li>运行单元测试，打开测试资源管理器，选择顶部菜单栏中的“测试”&gt;“测试资源管理器”（或按 Ctrl + E，T）。点击”在视图中运行所有测试”。<a href=\"https://docs.microsoft.com/zh-cn/visualstudio/test/run-unit-tests-with-test-explorer?view=vs-2019\">测试资源管理器</a>\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/8a2f7d4e-990a-4d74-937f-542e4bc30858.png\" data-is-external-image=\"true\"  alt=\"8a2f7d4e-990a-4d74-937f-542e4bc30858.png\" /></figure></li>\n</ol>\n<hr>\n<h1 id=\"问题清单：\">问题清单：</h1>\n<blockquote>\n<p>官方文档 <a href=\"https://docs.microsoft.com/zh-cn/visualstudio/test/how-to-use-google-test-for-cpp?view=vs-2019\">如何使用适用于 C++ 的 Google Test - Visual Studio (Windows) | Microsoft Docs</a></p>\n</blockquote>\n<ol>\n<li>无法找到Google Test。\n验证是否在计算机上安装了Google Test, 注意只有在isual Studio 2017 及更高版本中Visual Studio才集成了Google Test。验证方式：打开Visual Studio Installer程序，在工作负荷组件下找到Google Test测试适配器：\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/feb62d3f-82fb-4678-876f-10b842d5e7ac.png\" data-is-external-image=\"true\"  alt=\"feb62d3f-82fb-4678-876f-10b842d5e7ac.png\" /></figure></li>\n<li>无法打开文件gtest_maind.lib。\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/42249b92-eb4d-4a52-8bdf-6e518208b682.png\" data-is-external-image=\"true\"  alt=\"42249b92-eb4d-4a52-8bdf-6e518208b682.png\" /></figure>\n文件路径过长，超出最大路径长度限制。可能是由于<a href=\"https://docs.microsoft.com/zh-cn/windows/win32/fileio/maximum-file-path-limitation?tabs=cmd\">最大路径长度限制</a>。</li>\n<li>fatal error C1189: #error:  Building MFC application with /MD[d] (CRT dll version) requires MFC shared dll version. Please #define _AFXDLL or do not use /MD[d]\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/c7107611-0da0-4c1f-b82a-0e881c6822a1.png\" data-is-external-image=\"true\"  alt=\"c7107611-0da0-4c1f-b82a-0e881c6822a1.png\" /></figure>\n测试项目运行库应与被测试项目的运行库保持一致。若测试项目为在共享DLL中使用MFC，则可依据报错信息在预编译文件“pch.h“中添加<code>#define _AFXDLL</code>。</li>\n<li>error LNK2038: 检测到“RuntimeLibrary”的不匹配项: 值“MDd_DynamicDebug”不匹配值“MTd_StaticDebug”(test.obj 中)。\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/4a7984f9-e6ae-43b5-b2ca-2284d62f9eeb.png\" data-is-external-image=\"true\"  alt=\"4a7984f9-e6ae-43b5-b2ca-2284d62f9eeb.png\" /></figure>\n运行库保持不一致，测试项目运行库应与被测试项目的运行库保持一致。</li>\n<li>项目生成成功而，但是测试资源管理器为空，未显示可用测试。\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/a191fe30-6078-40a5-90ee-665fe7b9969b.png\" data-is-external-image=\"true\"  alt=\"a191fe30-6078-40a5-90ee-665fe7b9969b.png\" /></figure>\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/e1ffe1d5-4389-4258-b50c-c2262107cea2.png\" data-is-external-image=\"true\"  alt=\"e1ffe1d5-4389-4258-b50c-c2262107cea2.png\" /></figure><ol>\n<li>打开菜单”视图” &gt; “输出”，显示输出来源选择”测试”。查看输出日志。\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/6a07a092-9802-4a8f-a643-07fb865490b9.png\" data-is-external-image=\"true\"  alt=\"6a07a092-9802-4a8f-a643-07fb865490b9.png\" /></figure></li>\n<li>确认测试模块的可执行文件与被测试模块的可执行文件文件路径是否相同。</li>\n</ol>\n</li>\n<li>unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.\n访问了非法的内存地址。解决方式：在顶部菜单栏中，选择“调试” &gt; “窗口” &gt; “异常设置” ，确保所有项都打勾，然后调试运行，根据报错信息进行修改。\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/8470ef77-9bcd-4562-b971-fb45b16b2c62.png\" data-is-external-image=\"true\"  alt=\"8470ef77-9bcd-4562-b971-fb45b16b2c62.png\" /></figure></li>\n</ol>\n",
            "author": {
                "name": "bethjohanssen"
            },
            "tags": [
                   "工具",
                   "VS2019",
                   "GoogleTest"
            ],
            "date_published": "2021-09-01T09:28:28+08:00",
            "date_modified": "2021-11-01T10:47:09+08:00"
        }
    ]
}
